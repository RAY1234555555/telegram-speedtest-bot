# bot.py
import logging
import os
import sys
import asyncio
import time
from datetime import datetime
from typing import List, Dict

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

from dotenv import load_dotenv

# Import our custom modules
from parser import parse_single_node, parse_subscription_link, get_node_info_summary
from speedtester import test_node_speed, test_multiple_nodes_speed, format_test_result

# --- Setup Logging ---
# Ensure output goes to stdout so systemd can capture it.
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout) # Output to stdout
    ]
)
logger = logging.getLogger(__name__)

# --- Load Environment Variables ---
# For systemd, env vars are passed via secure_runner.sh.
# load_dotenv() is mainly for local development convenience if you run this script directly.
load_dotenv()

# --- Configuration ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
ALLOWED_USER_IDS_STR = os.environ.get('ALLOWED_USER_IDS') # String from env
# !!! USING YOUR PROVIDED TELEGRAM API PROXY URL !!!
TELEGRAM_API_URL = os.environ.get('TELEGRAM_API_URL', "https://tg.993474.xyz/bot") # <<< YOUR TG API PROXY URL

# --- Basic Validation ---
if not TELEGRAM_BOT_TOKEN:
    logger.critical("TELEGRAM_BOT_TOKEN environment variable not set. Exiting.")
    sys.exit(1)
if not ALLOWED_USER_IDS_STR:
    logger.warning("ALLOWED_USER_IDS environment variable not set. Bot will not restrict users.")
    ALLOWED_USER_IDS = set() # Empty set means no restriction
else:
    ALLOWED_USER_IDS = set(ALLOWED_USER_IDS_STR.split(',')) # Convert to a set for faster lookup

# --- User Data Storage ---
# In production, use a database
user_data = {}

# --- Authorization Check ---
def is_authorized(user_id: int) -> bool:
    """Ê£ÄÊü•Áî®Êà∑ÊòØÂê¶ÊúâÊùÉÈôê"""
    if not ALLOWED_USER_IDS: # If no restrictions are set
        return True
    return str(user_id) in ALLOWED_USER_IDS

# --- Main Keyboard ---
def get_main_keyboard():
    """Ëé∑Âèñ‰∏ªËèúÂçïÈîÆÁõò"""
    keyboard = [
        [InlineKeyboardButton("üöÄ ÂçïËäÇÁÇπÊµãÈÄü", callback_data="help_single")],
        [InlineKeyboardButton("üìä ÊâπÈáèÊµãÈÄü", callback_data="help_batch")],
        [InlineKeyboardButton("üîó ËÆ¢ÈòÖÊµãÈÄü", callback_data="help_subscription")],
        [InlineKeyboardButton("üìã ÊîØÊåÅÂçèËÆÆ", callback_data="help_protocols")],
        [InlineKeyboardButton("‚öôÔ∏è ËÆæÁΩÆÈÄâÈ°π", callback_data="settings")]
    ]
    return InlineKeyboardMarkup(keyboard)

# --- Bot Handlers ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sends a welcome message when the /start command is issued."""
    user_id = update.effective_user.id
    if not is_authorized(user_id):
        logger.warning(f"Unauthorized access attempt from User ID: {user_id}")
        await update.message.reply_text("‚ùå Êä±Ê≠âÔºåÊÇ®Ê≤°Êúâ‰ΩøÁî®Ê≠§Êú∫Âô®‰∫∫ÁöÑÊùÉÈôê„ÄÇ")
        return

    welcome_text = """
üéâ Ê¨¢Ëøé‰ΩøÁî®ÂÖ®ËÉΩÊµãÈÄüÊú∫Âô®‰∫∫ÔºÅ

üöÄ **ÂäüËÉΩÁâπËâ≤Ôºö**
‚Ä¢ ÊîØÊåÅÂ§öÁßçÂçèËÆÆÔºöVMess, VLess, SS, Hysteria2, Trojan
‚Ä¢ ËÆ¢ÈòÖÈìæÊé•ÊâπÈáèÊµãÈÄü
‚Ä¢ ÂÆûÊó∂ÈÄüÂ∫¶ÂíåÂª∂ËøüÊ£ÄÊµã
‚Ä¢ ËäÇÁÇπ‰ø°ÊÅØËØ¶ÁªÜÂ±ïÁ§∫
‚Ä¢ ÊµÅÈáè‰ΩøÁî®ÊÉÖÂÜµÊü•ËØ¢

üìù **Âø´ÈÄüÂºÄÂßãÔºö**
Áõ¥Êé•ÂèëÈÄÅËäÇÁÇπÈìæÊé•ÊàñËÆ¢ÈòÖÂú∞ÂùÄÂç≥ÂèØÂºÄÂßãÊµãÈÄüÔºÅ

ÁÇπÂáª‰∏ãÊñπÊåâÈíÆ‰∫ÜËß£Êõ¥Â§öÂäüËÉΩ üëá
"""
    
    await update.message.reply_text(
        welcome_text, 
        reply_markup=get_main_keyboard(),
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sends a help message when the /help command is issued."""
    user_id = update.effective_user.id
    if not is_authorized(user_id):
        await update.message.reply_text("‚ùå Êä±Ê≠âÔºåÊÇ®Ê≤°Êúâ‰ΩøÁî®Ê≠§Êú∫Âô®‰∫∫ÁöÑÊùÉÈôê„ÄÇ")
        return

    help_text = """
üìñ **‰ΩøÁî®ËØ¥Êòé**

üî∏ **ÂçïËäÇÁÇπÊµãÈÄü**
Áõ¥Êé•ÂèëÈÄÅËäÇÁÇπÈìæÊé•Ôºö
`vmess://...`
`vless://...`
`ss://...`
`hy2://...`
`trojan://...`

üî∏ **ÊâπÈáèÊµãÈÄü**
ÂèëÈÄÅÂ§ö‰∏™ËäÇÁÇπÔºàÊØèË°å‰∏Ä‰∏™Ôºâ

üî∏ **ËÆ¢ÈòÖÊµãÈÄü**
ÂèëÈÄÅËÆ¢ÈòÖÈìæÊé•Ôºö
`https://your-subscription-url`

üî∏ **Âø´Êç∑ÂëΩ‰ª§**
/start - ÂºÄÂßã‰ΩøÁî®
/help - Êü•ÁúãÂ∏ÆÂä©
/status - Êü•ÁúãÁä∂ÊÄÅ
/settings - ËÆæÁΩÆÈÄâÈ°π
/stats - ‰ΩøÁî®ÁªüËÆ°

üí° **ÊèêÁ§∫Ôºö** ÊµãÈÄüËøáÁ®ãÂèØËÉΩÈúÄË¶ÅÂá†ÁßíÈíüÔºåËØ∑ËÄêÂøÉÁ≠âÂæÖÔºÅ
"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Áä∂ÊÄÅÂëΩ‰ª§"""
    user_id = update.effective_user.id
    if not is_authorized(user_id):
        await update.message.reply_text("‚ùå Êä±Ê≠âÔºåÊÇ®Ê≤°Êúâ‰ΩøÁî®Ê≠§Êú∫Âô®‰∫∫ÁöÑÊùÉÈôê„ÄÇ")
        return

    status_text = f"""
üìä **Êú∫Âô®‰∫∫Áä∂ÊÄÅ**

ü§ñ Áä∂ÊÄÅ: ËøêË°å‰∏≠ ‚úÖ
‚è∞ ËøêË°åÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üë• ÊéàÊùÉÁî®Êà∑: {len(ALLOWED_USER_IDS) if ALLOWED_USER_IDS else 'Êó†ÈôêÂà∂'}
üîß ÁâàÊú¨: v2.0.0

üåê **ÊîØÊåÅÂçèËÆÆ:**
‚Ä¢ VMess ‚úÖ
‚Ä¢ VLess ‚úÖ  
‚Ä¢ Shadowsocks ‚úÖ
‚Ä¢ Hysteria2 ‚úÖ
‚Ä¢ Trojan ‚úÖ

üìà **‰ªäÊó•ÁªüËÆ°:**
‚Ä¢ ÊµãÈÄüÊ¨°Êï∞: {user_data.get(user_id, {}).get('test_count', 0)}
‚Ä¢ ËäÇÁÇπÊï∞Èáè: {user_data.get(user_id, {}).get('node_count', 0)}
"""
    
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ËÆæÁΩÆÂëΩ‰ª§"""
    user_id = update.effective_user.id
    if not is_authorized(user_id):
        await update.message.reply_text("‚ùå Êä±Ê≠âÔºåÊÇ®Ê≤°Êúâ‰ΩøÁî®Ê≠§Êú∫Âô®‰∫∫ÁöÑÊùÉÈôê„ÄÇ")
        return

    keyboard = [
        [InlineKeyboardButton("‚ö° Âø´ÈÄüÊ®°Âºè", callback_data="setting_fast")],
        [InlineKeyboardButton("üîç ËØ¶ÁªÜÊ®°Âºè", callback_data="setting_detailed")],
        [InlineKeyboardButton("üî¢ Âπ∂ÂèëÊï∞ËÆæÁΩÆ", callback_data="setting_concurrent")],
        [InlineKeyboardButton("‚è±Ô∏è Ë∂ÖÊó∂ËÆæÁΩÆ", callback_data="setting_timeout")],
        [InlineKeyboardButton("üîô ËøîÂõû‰∏ªËèúÂçï", callback_data="main_menu")]
    ]
    
    settings_text = """
‚öôÔ∏è **ËÆæÁΩÆÈÄâÈ°π**

ÂΩìÂâçËÆæÁΩÆÔºö
‚Ä¢ ÊµãËØïÊ®°Âºè: Ê†áÂáÜÊ®°Âºè
‚Ä¢ Âπ∂ÂèëÊï∞: 3
‚Ä¢ Ë∂ÖÊó∂Êó∂Èó¥: 30Áßí
‚Ä¢ ËØ¶ÁªÜ‰ø°ÊÅØ: ÂºÄÂêØ

ËØ∑ÈÄâÊã©Ë¶Å‰øÆÊîπÁöÑËÆæÁΩÆÔºö
"""
    
    await update.message.reply_text(
        settings_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Â§ÑÁêÜÂõûË∞ÉÊü•ËØ¢"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "main_menu":
        await query.edit_message_text(
            "üè† ‰∏ªËèúÂçï\n\nÈÄâÊã©ÊÇ®ÈúÄË¶ÅÁöÑÂäüËÉΩÔºö",
            reply_markup=get_main_keyboard()
        )
    elif data == "help_single":
        help_text = """
üöÄ **ÂçïËäÇÁÇπÊµãÈÄü**

ÊîØÊåÅÁöÑÊ†ºÂºèÔºö
‚Ä¢ `vmess://base64encoded`
‚Ä¢ `vless://uuid@server:port?params#name`
‚Ä¢ `ss://method:password@server:port#name`
‚Ä¢ `hy2://auth@server:port?params#name`
‚Ä¢ `trojan://password@server:port?params#name`

Áõ¥Êé•ÂèëÈÄÅËäÇÁÇπÈìæÊé•Âç≥ÂèØÂºÄÂßãÊµãÈÄüÔºÅ
"""
        await query.edit_message_text(help_text, parse_mode='Markdown')
    elif data == "help_protocols":
        protocols_text = """
üìã **ÊîØÊåÅÁöÑÂçèËÆÆ**

‚úÖ **VMess**
- ÊîØÊåÅ TCP/WS/gRPC
- ÊîØÊåÅ TLS/Reality

‚úÖ **VLess** 
- ÊîØÊåÅ XTLS-Vision
- ÊîØÊåÅ Reality

‚úÖ **Shadowsocks**
- ÊîØÊåÅÂêÑÁßçÂä†ÂØÜÊñπÂºè
- ÊîØÊåÅ SIP003 Êèí‰ª∂

‚úÖ **Hysteria2**
- Âü∫‰∫é QUIC ÂçèËÆÆ
- È´òÈÄü‰º†Ëæì

‚úÖ **Trojan**
- TLS ‰º™Ë£Ö
- È´òÂÆâÂÖ®ÊÄß

üîÑ Êõ¥Â§öÂçèËÆÆÊåÅÁª≠Ê∑ªÂä†‰∏≠...
"""
        await query.edit_message_text(protocols_text, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handles regular text messages, treating them as potential node links or subscription links."""
    try:
        user_id = update.effective_user.id
        if not is_authorized(user_id):
            logger.warning(f"Unauthorized message from User ID: {user_id}")
            await update.message.reply_text("‚ùå Êä±Ê≠âÔºåÊÇ®Ê≤°Êúâ‰ΩøÁî®Ê≠§Êú∫Âô®‰∫∫ÁöÑÊùÉÈôê„ÄÇ")
            return

        text = update.message.text
        if not text:
            return

        logger.info(f"Received message from {update.effective_user.username} ({user_id}): {text[:60]}...") # Log first 60 chars

        # Send a "processing" message and get its ID to edit later
        try:
            processing_message = await context.bot.send_message(chat_id=update.effective_chat.id, text="‚è≥ Processing your request, please wait...")
            message_id_to_edit = processing_message.message_id
        except Exception as e:
            logger.error(f"Failed to send processing message: {e}")
            # If sending the initial message fails, try to send a simple reply
            await update.message.reply_text("‚è≥ Processing your request, please wait...")
            return

        try:
            nodes_to_test = []
            # --- Parsing Logic ---
            # Check if it's a direct VMess link
            if text.startswith("vmess://"):
                node = parse_single_node(text)
                if node:
                    nodes_to_test.append(node)
            # Check if it's a VLess link (not supported yet)
            elif text.startswith("vless://"):
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=message_id_to_edit,
                    text="‚ùå VLess protocol is not supported yet. Please send a vmess:// link instead."
                )
                return
            # Check if it's a URL (potential subscription link)
            elif text.startswith("http://") or text.startswith("https://"):
                # TODO: Implement fetching and parsing for subscription URLs
                # For now, we'll inform the user that only direct vmess links are supported for parsing
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=message_id_to_edit,
                    text="üîÑ Ê≠£Âú®Ëé∑ÂèñËÆ¢ÈòÖÂÜÖÂÆπ..."
                )
                nodes_to_test = parse_subscription_link(text)
                
                if not nodes_to_test:
                    await context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=message_id_to_edit,
                        text="‚ùå Êó†Ê≥ïËß£ÊûêËÆ¢ÈòÖÈìæÊé•ÊàñËÆ¢ÈòÖ‰∏∫Á©∫"
                    )
                    return
                    
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=message_id_to_edit,
                    text=f"üìä ÂèëÁé∞ {len(nodes_to_test)} ‰∏™ËäÇÁÇπÔºåÂºÄÂßãÊµãÈÄü..."
                )
                
            elif '\n' in text:
                # Multiple nodes
                lines = text.strip().split('\n')
                for line in lines:
                    line = line.strip()
                    if line:
                        node = parse_single_node(line)
                        if node:
                            nodes_to_test.append(node)
                
                if not nodes_to_test:
                    await context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=message_id_to_edit,
                        text="‚ùå Êú™ÊâæÂà∞ÊúâÊïàÁöÑËäÇÁÇπ‰ø°ÊÅØ"
                    )
                    return
                    
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=message_id_to_edit,
                    text=f"üìä ÂèëÁé∞ {len(nodes_to_test)} ‰∏™ËäÇÁÇπÔºåÂºÄÂßãÊµãÈÄü..."
                )
            else:
                # Not a recognized format
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=message_id_to_edit,
                    text="‚ùå Êó†Ê≥ïËØÜÂà´ÁöÑÊ†ºÂºè\n\n"
                    "ÊîØÊåÅÁöÑÊ†ºÂºèÔºö\n"
                    "‚Ä¢ Âçï‰∏™ËäÇÁÇπÈìæÊé•\n"
                    "‚Ä¢ Â§ö‰∏™ËäÇÁÇπÔºàÊØèË°å‰∏Ä‰∏™Ôºâ\n"
                    "‚Ä¢ ËÆ¢ÈòÖÈìæÊé• (http/https)\n\n"
                    "‰ΩøÁî® /help Êü•ÁúãËØ¶ÁªÜËØ¥Êòé"
                )
                return

            # --- Perform Speed Tests ---
            if len(nodes_to_test) == 1:
                # Single node speed test
                result = test_node_speed(nodes_to_test[0])
                response_text = "üéØ **ÂçïËäÇÁÇπÊµãÈÄüÁªìÊûú**\n\n"
                response_text += format_test_result(result)
                
            else:
                # Multiple nodes speed test
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=message_id_to_edit,
                    text=f"üöÄ Ê≠£Âú®Âπ∂ÂèëÊµãËØï {len(nodes_to_test)} ‰∏™ËäÇÁÇπ..."
                )
                results = test_multiple_nodes_speed(nodes_to_test[:10])  # Limit to 10 nodes
                
                # Sort by speed
                results.sort(key=lambda x: x.get('download_speed_mbps', 0), reverse=True)
                
                response_text = f"üìä **ÊâπÈáèÊµãÈÄüÁªìÊûú** ({len(results)} ‰∏™ËäÇÁÇπ)\n\n"
                
                for i, result in enumerate(results[:5], 1):  # Show top 5
                    response_text += f"**#{i}** {format_test_result(result)}\n"
                
                if len(results) > 5:
                    response_text += f"\n... ËøòÊúâ {len(results) - 5} ‰∏™ËäÇÁÇπÁªìÊûú"

            # --- Update User Statistics ---
            if user_id not in user_data:
                user_data[user_id] = {'test_count': 0, 'node_count': 0}

            user_data[user_id]['test_count'] += 1
            user_data[user_id]['node_count'] += len(nodes_to_test)

            # --- Send Results ---
            if len(response_text) > 4096:
                # Message too long, split into chunks
                chunks = [response_text[i:i+4000] for i in range(0, len(response_text), 4000)]
                await context.bot.edit_message_text(chat_id=update.effective_chat.id, message_id=message_id_to_edit, text=chunks[0], parse_mode='Markdown')
                for chunk in chunks[1:]:
                    await context.bot.send_message(chat_id=update.effective_chat.id, text=chunk, parse_mode='Markdown')
            else:
                await context.bot.edit_message_text(chat_id=update.effective_chat.id, message_id=message_id_to_edit, text=response_text, parse_mode='Markdown')

        except Exception as e:
            logger.error(f"Error handling message: {e}", exc_info=True)
            try:
                await context.bot.edit_message_text(chat_id=update.effective_chat.id, message_id=message_id_to_edit, text="An internal error occurred. Please try again later.")
            except Exception as edit_err:
                logger.error(f"Failed to edit message after error: {edit_err}")
                # If editing fails, try to send a new message
                try:
                    await update.message.reply_text("An internal error occurred. Please try again later.")
                except Exception as reply_err:
                    logger.error(f"Failed to send reply after error: {reply_err}")

    except Exception as e:
        logger.error(f"Critical error in handle_message: {e}", exc_info=True)
        try:
            await update.message.reply_text("A critical error occurred. Please try again later.")
        except Exception as critical_err:
            logger.error(f"Failed to send critical error message: {critical_err}")

async def send_test_message(application):
    """Send a test message to authorized users."""
    if not ALLOWED_USER_IDS:
        return
        
    test_message = """
üéâ **ÊµãÈÄüÊú∫Âô®‰∫∫ÂÆâË£ÖÊàêÂäüÔºÅ**

‚úÖ ÊúçÂä°Â∑≤ÂêØÂä®Âπ∂ËøêË°åÊ≠£Â∏∏
üöÄ ÊîØÊåÅÂ§öÁßçÂçèËÆÆÊµãÈÄü
üìä ÂäüËÉΩÂÆåÊï¥ÂèØÁî®

ÂèëÈÄÅ /start ÂºÄÂßã‰ΩøÁî®
ÂèëÈÄÅËäÇÁÇπÈìæÊé•ËøõË°åÊµãÈÄüÊµãËØï

---
ÂÆâË£ÖÊó∂Èó¥: {time}
""".format(time=datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

    for user_id in ALLOWED_USER_IDS:
        try:
            await application.bot.send_message(
                chat_id=int(user_id),
                text=test_message,
                parse_mode='Markdown'
            )
            logger.info(f"Test message sent to user {user_id}")
        except Exception as e:
            logger.error(f"Failed to send test message to user {user_id}: {e}")

# --- Main Function ---
def main() -> None:
    """Start the bot."""
    logger.info("Starting Telegram Speed Test Bot v2.0...")
    
    try:
        # Create the Application and pass it your bot's token.
        # Use the base_url parameter to use your custom API URL (yourÂèç‰ª£ address).
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).base_url(TELEGRAM_API_URL).build()

        # Register handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("status", status_command))
        application.add_handler(CommandHandler("settings", settings_command))
        application.add_handler(CallbackQueryHandler(handle_callback_query))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("Bot handlers registered successfully")

        # Start the Bot
        logger.info("Starting bot polling...")
        
        # Send test message
        asyncio.create_task(send_test_message(application))
        
        application.run_polling()

    except Exception as e:
        logger.critical(f"Failed to initialize or run bot: {e}", exc_info=True)
        sys.exit(1)

if __name__ == '__main__':
    main()
